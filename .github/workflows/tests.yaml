name: ðŸ”§ Application tests
permissions:
  contents: read
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, version-2.0.0, Filter-improvement ]

jobs:
  flake:
    name: ðŸ”§ Python Lint
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8.18
          architecture: x64
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Display branch
        run: git branch --show-current

      - name: Install flake8
        run: pip install flake8 flake8-docstrings pydoclint[flake8]

      - name: Run flake8
        run: flake8

  build_image:
    needs: flake
    name: Build Docker Image
    runs-on: ubuntu-latest
    env:
      APP_IMAGE: kartoza/django_react_base:dev
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name: Display branch
        run: git branch --show-current

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/docker/Dockerfile
          push: false
          load: true
          target: dev
          tags: ${{ env.APP_IMAGE }}
          cache-from: |
            type=gha,scope=test
            type=gha,scope=prod
          cache-to: type=gha,scope=test

      - name: Save Docker Image as Tar File
        run: docker save -o /tmp/my-image.tar ${{ env.APP_IMAGE }}

      - name: Upload Docker Image Cache
        uses: actions/cache@v3
        with:
          path: /tmp/my-image.tar
          key: ${{ runner.os }}-docker-image-${{ hashFiles('deployment/docker/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-image-

  django_app_tests:
    needs: build_image
    name: Django App Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_suite: [
          { id: "backend-tests", mode: "backend" },
          { id: "frontend-tests", mode: "frontend" },
          { id: "e2e-view", mode: "e2e", path: "tests/view", workers: 2, script: "" }
        ]
    env:
      APP_IMAGE: kartoza/django_react_base
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name: Display branch
        run: git branch --show-current

      - name: Restore Docker Image from Cache
        uses: actions/cache@v3
        with:
          path: /tmp/my-image.tar
          key: ${{ runner.os }}-docker-image-${{ hashFiles('deployment/docker/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-image-

      - name: Load Docker Image
        run: docker load -i /tmp/my-image.tar

      - name: Run docker-compose services
        run: |
          ./setup.sh
          cd deployment
          echo "Override docker-compose.test.yml for testing purposes"
          cp docker-compose.test.yml docker-compose.override.yml
          cd ../
          make dev
          make wait-db
          docker volume ls
          docker exec django_react_base-dev rm -rf /home/web/django_project/frontend
          docker cp ./django_project django_react_base-dev:/home/web
          docker restart django_react_base-dev
          docker restart django_react_base-worker

      - name: Install requirements
        run: |
          docker cp ./deployment/docker/requirements.txt geosight_dev:/home/web/requirements.txt
          docker cp ./deployment/docker/requirements-dev.txt geosight_dev:/home/web/requirements-dev.txt
          docker exec -i geosight_dev bash -c "pip install -r /home/web/requirements.txt && pip install -r /home/web/requirements-dev.txt"

      - name: Backend (Prepare container and test)
        if: ${{ matrix.test_suite.mode == 'backend' }}
        run: |
          make dev-entrypoint
          make dev-test

      - name: Frontend
        if: ${{ matrix.test_suite.mode == 'frontend' }}
        run: |
          make frontend-test

      - name: E2E (Prepare container)
        if: ${{ matrix.test_suite.mode == 'e2e' }}
        run: |
          make dev-entrypoint
          make dev-runserver
          ${{ matrix.test_suite.script }}
          make sleep

      - name: E2E (Test production ready)
        if: ${{ matrix.test_suite.mode == 'e2e' }}
        run: |
          curl http://localhost:8000/
          if [ $? -ne 0 ]; then
            echo "Curl command failed"
            exit 1
          fi

      - name: E2E (Test)
        if: ${{ matrix.test_suite.mode == 'e2e' }}
        working-directory: ./playwright/ci-test
        run: |
          npm install
          npm ci
          npx playwright install --with-deps
          npx playwright test ${{ matrix.test_suite.path }} --workers ${{ matrix.test_suite.workers }}

      - name: Upload Playwright Screenshots
        if: failure()
        uses: actions/upload-artifact@v4

        with:
          name: playwright-screenshots-${{ matrix.test_suite.id }}
          path: playwright/ci-test/playwright-results/
